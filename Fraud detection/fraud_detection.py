# -*- coding: utf-8 -*-
"""Final_Project_CS558.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Xgw5weHcpF3d1VJCauf1hb0e65PrkVg
"""

try:
    import concrete.ml
except:
    import subprocess
    import IPython
    subprocess.check_output("pip install concrete-ml>=0.5.1", shell=True)
    IPython.Application.instance().kernel.do_shutdown(True)

from sklearn.model_selection import train_test_split
from concrete.ml.sklearn import LogisticRegression
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

df = pd.read_csv('Fraudulent_E-Commerce_Transaction_Data_2.csv')

df

clean_df = df.drop(columns=['Transaction ID', 'Customer ID', 'IP Address'])
clean_df['Transaction Date'] = pd.to_datetime(clean_df['Transaction Date'])
clean_df['Transaction Day'] = clean_df['Transaction Date'].dt.dayofweek
clean_df['Transaction Month'] = clean_df['Transaction Date'].dt.month
clean_df['Transaction Hour'] = clean_df['Transaction Date'].dt.hour
clean_df['Transaction Date'] = pd.to_datetime(clean_df['Transaction Date'])
clean_df['Transaction Hour']

label_encoder = LabelEncoder()
clean_df['Payment Method'] = label_encoder.fit_transform(clean_df['Payment Method'])
clean_df['Product Category'] = label_encoder.fit_transform(clean_df['Product Category'])
clean_df['Customer Location'] = label_encoder.fit_transform(clean_df['Customer Location'])
clean_df['Device Used'] = label_encoder.fit_transform(clean_df['Device Used'])
clean_df[['Payment Method', 'Product Category', 'Customer Location', 'Device Used']]

def extract_zip(address):
    return address.split(' ')[-1]
def extract_city(address):
    return address.split(',')[0]

clean_df['Shipping ZIP'] = clean_df['Shipping Address'].apply(lambda x: extract_zip(x))
clean_df['Billing ZIP'] = clean_df['Billing Address'].apply(lambda x: extract_zip(x))
clean_df['Shipping City'] = clean_df['Shipping Address'].apply(lambda x: extract_city(x))
clean_df['Billing City'] = clean_df['Billing Address'].apply(lambda x: extract_city(x))
clean_df['ZIP Match'] = (clean_df['Shipping ZIP'] == clean_df['Billing ZIP']).astype(int)
clean_df['City Match'] = (clean_df['Shipping City'] == clean_df['Billing City']).astype(int)
clean_df[['Shipping Address', 'Billing Address', 'ZIP Match', 'City Match']]

final_df = clean_df.drop(columns=['Shipping Address', 'Billing Address', 'Transaction Date', 'Shipping City', 'Billing City'])

final_df

X = final_df.drop('Is Fraudulent', axis=1)
y = final_df['Is Fraudulent']

X

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

y_test

model = LogisticRegression(n_bits=8)
model.fit(X_train, y_train)

y_pred_clear = model.predict(X_test)
model.compile(X_train)

y_pred_fhe = model.predict(X_test, fhe="execute")

y_pred_fhe

print(
    f"{(y_pred_fhe == y_pred_clear).sum()} examples over {len(y_pred_fhe)} "
    "have an FHE inference equal to the clear inference."
)

fhe_accuracy = accuracy_score(y_test, y_pred_fhe)
print(f"FHE Accuracy: {fhe_accuracy * 100}%")

accuracy = model.score(X_test, y_test)
print(f"Accuracy: {accuracy * 100}%")

from concrete.ml.pandas import ClientEngine
from io import StringIO
import pandas

data_left = """index,total_bill,tip,sex,smoker
1,12.54,2.5,Male,No
2,11.17,1.5,Female,No
3,20.29,2.75,Female,No
4,20.29,2.75,Female,No
5,20.29,2.75,Female,No
"""
new_df = pandas.read_csv(StringIO(data_left))
client = ClientEngine(keys_path="my_keys")
df_encrypted = client.encrypt_from_pandas(new_df)

df_encrypted

df_decrypted = client.decrypt_to_pandas(df_encrypted)

df_decrypted

labels = ['FHE Accuracy', 'Model Accuracy']
values = [fhe_accuracy * 100, accuracy * 100]
plt.figure(figsize=(8, 5))
plt.bar(labels, values, color=['blue', 'orange'])
plt.xlabel('Method')
plt.ylabel('Accuracy (%)')
plt.title('Comparison of FHE Accuracy vs. Model Accuracy')
plt.show()

